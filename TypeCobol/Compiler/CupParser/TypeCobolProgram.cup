// JavaCup specification for a simple expression evaluator (w/ actions)

namespace TypeCobol.Compiler.CupParser;

using TUVienna.CS_CUP.Runtime;
using System;
using System.Collections;
using System.Collections.Generic;
using TypeCobol.Compiler.CodeElements;
using TypeCobol.Compiler.CupParser.NodeBuilder;

action code {:
	public IProgramClassBuilder Builder
	{
		get;
		set;
	}
	//Current program identification
	TypeCobol.Compiler.CodeElements.ProgramIdentification programIdentification;
	//Curerent library copy;
	TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement libraryCopy;
:};


/* Terminals (tokens returned by the scanner). */
terminal TypeCobol.Compiler.CodeElements.ProgramIdentification ProgramIdentification;
terminal TypeCobol.Compiler.CodeElements.ProgramEnd ProgramEnd;
terminal TypeCobol.Compiler.CodeElements.ClassIdentification ClassIdentification;
terminal TypeCobol.Compiler.CodeElements.ClassEnd ClassEnd;
terminal TypeCobol.Compiler.CodeElements.FactoryIdentification FactoryIdentification;
terminal TypeCobol.Compiler.CodeElements.FactoryEnd FactoryEnd;
terminal TypeCobol.Compiler.CodeElements.ObjectIdentification ObjectIdentification;
terminal TypeCobol.Compiler.CodeElements.ObjectEnd ObjectEnd;
terminal TypeCobol.Compiler.CodeElements.MethodIdentification MethodIdentification;
terminal TypeCobol.Compiler.CodeElements.MethodEnd MethodEnd;
terminal TypeCobol.Compiler.CodeElements.EnvironmentDivisionHeader EnvironmentDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.DataDivisionHeader DataDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.ProcedureDivisionHeader ProcedureDivisionHeader;
terminal TypeCobol.Compiler.CodeElements.DeclarativesHeader DeclarativesHeader;
terminal TypeCobol.Compiler.CodeElements.DeclarativesEnd DeclarativesEnd;
terminal TypeCobol.Compiler.CodeElements.SectionHeader SectionHeader;
terminal TypeCobol.Compiler.CodeElements.ConfigurationSectionHeader ConfigurationSectionHeader;
terminal TypeCobol.Compiler.CodeElements.InputOutputSectionHeader InputOutputSectionHeader;
terminal TypeCobol.Compiler.CodeElements.FileSectionHeader FileSectionHeader;
terminal TypeCobol.Compiler.CodeElements.WorkingStorageSectionHeader WorkingStorageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.LocalStorageSectionHeader LocalStorageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.LinkageSectionHeader LinkageSectionHeader;
terminal TypeCobol.Compiler.CodeElements.ParagraphHeader ParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.FileControlParagraphHeader FileControlParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.IOControlParagraphHeader IOControlParagraphHeader;
terminal TypeCobol.Compiler.CodeElements.SentenceEnd SentenceEnd;
terminal TypeCobol.Compiler.CodeElements.FileDescriptionEntry FileDescriptionEntry;
terminal TypeCobol.Compiler.CodeElements.DataDescriptionEntry DataDescriptionEntry;
terminal TypeCobol.Compiler.CodeElements.DataRedefinesEntry DataRedefinesEntry;
terminal TypeCobol.Compiler.CodeElements.DataRenamesEntry DataRenamesEntry;
terminal TypeCobol.Compiler.CodeElements.DataConditionEntry DataConditionEntry;
terminal TypeCobol.Compiler.CodeElements.FileControlEntry FileControlEntry;
terminal TypeCobol.Compiler.CodeElements.IOControlEntry IOControlEntry;
terminal TypeCobol.Compiler.CodeElements.SourceComputerParagraph SourceComputerParagraph;
terminal TypeCobol.Compiler.CodeElements.ObjectComputerParagraph ObjectComputerParagraph;
terminal TypeCobol.Compiler.CodeElements.SpecialNamesParagraph SpecialNamesParagraph;
terminal TypeCobol.Compiler.CodeElements.RepositoryParagraph RepositoryParagraph;
terminal TypeCobol.Compiler.CodeElements.AcceptStatement AcceptStatement;
terminal TypeCobol.Compiler.CodeElements.AddStatement AddStatement;
terminal TypeCobol.Compiler.CodeElements.AlterStatement AlterStatement;
terminal TypeCobol.Compiler.CodeElements.CallStatement CallStatement;
terminal TypeCobol.Compiler.CodeElements.CancelStatement CancelStatement;
terminal TypeCobol.Compiler.CodeElements.CloseStatement CloseStatement;
terminal TypeCobol.Compiler.CodeElements.ComputeStatement ComputeStatement;
terminal TypeCobol.Compiler.CodeElements.ContinueStatement ContinueStatement;
terminal TypeCobol.Compiler.CodeElements.DeleteStatement DeleteStatement;
terminal TypeCobol.Compiler.CodeElements.DisplayStatement DisplayStatement;
terminal TypeCobol.Compiler.CodeElements.DivideStatement DivideStatement;
terminal TypeCobol.Compiler.CodeElements.EntryStatement EntryStatement;
terminal TypeCobol.Compiler.CodeElements.EvaluateStatement EvaluateStatement;
terminal TypeCobol.Compiler.CodeElements.ExecStatement ExecStatement;
terminal TypeCobol.Compiler.CodeElements.ExitMethodStatement ExitMethodStatement;
terminal TypeCobol.Compiler.CodeElements.ExitProgramStatement ExitProgramStatement;
terminal TypeCobol.Compiler.CodeElements.ExitStatement ExitStatement;
terminal TypeCobol.Compiler.CodeElements.GobackStatement GobackStatement;
terminal TypeCobol.Compiler.CodeElements.GotoStatement GotoStatement;
terminal TypeCobol.Compiler.CodeElements.IfStatement IfStatement;
terminal TypeCobol.Compiler.CodeElements.InitializeStatement InitializeStatement;
terminal TypeCobol.Compiler.CodeElements.InspectStatement InspectStatement;
terminal TypeCobol.Compiler.CodeElements.InvokeStatement InvokeStatement;
terminal TypeCobol.Compiler.CodeElements.MergeStatement MergeStatement;
terminal TypeCobol.Compiler.CodeElements.MoveStatement MoveStatement;
terminal TypeCobol.Compiler.CodeElements.MultiplyStatement MultiplyStatement;
terminal TypeCobol.Compiler.CodeElements.NextSentenceStatement NextSentenceStatement;
terminal TypeCobol.Compiler.CodeElements.OpenStatement OpenStatement;
terminal TypeCobol.Compiler.CodeElements.PerformProcedureStatement PerformProcedureStatement;
terminal TypeCobol.Compiler.CodeElements.PerformStatement PerformStatement;
terminal TypeCobol.Compiler.CodeElements.ReadStatement ReadStatement;
terminal TypeCobol.Compiler.CodeElements.ReleaseStatement ReleaseStatement;
terminal TypeCobol.Compiler.CodeElements.ReturnStatement ReturnStatement;
terminal TypeCobol.Compiler.CodeElements.RewriteStatement RewriteStatement;
terminal TypeCobol.Compiler.CodeElements.SearchStatement SearchStatement;
terminal TypeCobol.Compiler.CodeElements.SetStatement SetStatement;
terminal TypeCobol.Compiler.CodeElements.SortStatement SortStatement;
terminal TypeCobol.Compiler.CodeElements.StartStatement StartStatement;
terminal TypeCobol.Compiler.CodeElements.StopStatement StopStatement;
terminal TypeCobol.Compiler.CodeElements.StringStatement StringStatement;
terminal TypeCobol.Compiler.CodeElements.SubtractStatement SubtractStatement;
terminal TypeCobol.Compiler.CodeElements.UnstringStatement UnstringStatement;
terminal TypeCobol.Compiler.CodeElements.UseStatement UseStatement;
terminal TypeCobol.Compiler.CodeElements.WriteStatement WriteStatement;
terminal TypeCobol.Compiler.CodeElements.XmlGenerateStatement XmlGenerateStatement;
terminal TypeCobol.Compiler.CodeElements.XmlParseStatement XmlParseStatement;
terminal TypeCobol.Compiler.CodeElements.AtEndCondition AtEndCondition;
terminal TypeCobol.Compiler.CodeElements.NotAtEndCondition NotAtEndCondition;
terminal TypeCobol.Compiler.CodeElements.AtEndOfPageCondition AtEndOfPageCondition;
terminal TypeCobol.Compiler.CodeElements.NotAtEndOfPageCondition NotAtEndOfPageCondition;
terminal TypeCobol.Compiler.CodeElements.OnExceptionCondition OnExceptionCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnExceptionCondition NotOnExceptionCondition;
terminal TypeCobol.Compiler.CodeElements.OnOverflowCondition OnOverflowCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnOverflowCondition NotOnOverflowCondition;
terminal TypeCobol.Compiler.CodeElements.InvalidKeyCondition InvalidKeyCondition;
terminal TypeCobol.Compiler.CodeElements.NotInvalidKeyCondition NotInvalidKeyCondition;
terminal TypeCobol.Compiler.CodeElements.OnSizeErrorCondition OnSizeErrorCondition;
terminal TypeCobol.Compiler.CodeElements.NotOnSizeErrorCondition NotOnSizeErrorCondition;
terminal TypeCobol.Compiler.CodeElements.ElseCondition ElseCondition;
terminal TypeCobol.Compiler.CodeElements.WhenCondition WhenCondition;
terminal TypeCobol.Compiler.CodeElements.WhenOtherCondition WhenOtherCondition;
terminal TypeCobol.Compiler.CodeElements.WhenSearchCondition WhenSearchCondition;
terminal TypeCobol.Compiler.CodeElements.AddStatementEnd AddStatementEnd;
terminal TypeCobol.Compiler.CodeElements.CallStatementEnd CallStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ComputeStatementEnd ComputeStatementEnd;
terminal TypeCobol.Compiler.CodeElements.DeleteStatementEnd DeleteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.DivideStatementEnd DivideStatementEnd;
terminal TypeCobol.Compiler.CodeElements.EvaluateStatementEnd EvaluateStatementEnd;
terminal TypeCobol.Compiler.CodeElements.IfStatementEnd IfStatementEnd;
terminal TypeCobol.Compiler.CodeElements.InvokeStatementEnd InvokeStatementEnd;
terminal TypeCobol.Compiler.CodeElements.MultiplyStatementEnd MultiplyStatementEnd;
terminal TypeCobol.Compiler.CodeElements.PerformStatementEnd PerformStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ReadStatementEnd ReadStatementEnd;
terminal TypeCobol.Compiler.CodeElements.ReturnStatementEnd ReturnStatementEnd;
terminal TypeCobol.Compiler.CodeElements.RewriteStatementEnd RewriteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.SearchStatementEnd SearchStatementEnd;
terminal TypeCobol.Compiler.CodeElements.StartStatementEnd StartStatementEnd;
terminal TypeCobol.Compiler.CodeElements.StringStatementEnd StringStatementEnd;
terminal TypeCobol.Compiler.CodeElements.SubtractStatementEnd SubtractStatementEnd;
terminal TypeCobol.Compiler.CodeElements.UnstringStatementEnd UnstringStatementEnd;
terminal TypeCobol.Compiler.CodeElements.WriteStatementEnd WriteStatementEnd;
terminal TypeCobol.Compiler.CodeElements.XmlStatementEnd XmlStatementEnd;
terminal TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement LibraryCopy;
terminal TypeCobol.Compiler.CodeElements.FunctionDeclarationHeader FunctionDeclarationHeader;
terminal TypeCobol.Compiler.CodeElements.FunctionDeclarationEnd FunctionDeclarationEnd;
terminal TypeCobol.Compiler.CodeElements.ProcedureStyleCallStatement ProcedureStyleCall;
terminal TypeCobol.Compiler.CodeElements.Program Program;

/* Non terminals */
non terminal cobolCompilationUnit, cobolProgram, cobolClass, cobolProgramBase, nestedProgram;
non terminal classEndOpt;
non terminal factoryIdentificationOpt;
non terminal factoryIdentification;
non terminal factoryEndOpt;
non terminal factoryDataDivisionOpt;
non terminal factoryDataDivision;
non terminal factoryObjectprocedureDivisionOpt;
non terminal factoryObjectprocedureDivision;
non terminal objectIdentificationOpt;
non terminal objectIdentification;
non terminal objectEndOpt;
non terminal methodDefitionsOpt;
non terminal methodDefitions;
non terminal methodDefition;
non terminal methodEnvironmentDivisionOpt;
non terminal methodEnvironmentDivision;

non terminal programAttributes;
non terminal TypeCobol.Compiler.CodeElements.LibraryCopyCodeElement libraryCopyOpt;
non terminal TypeCobol.Compiler.CodeElements.ProgramEnd programEndOpt;
non terminal nestedProgramOpt;

non terminal TypeCobol.Compiler.CodeElements.EnvironmentDivisionHeader environmentDivisionOpt, environmentDivision;
non terminal configurationSectionOpt, configurationSection;
non terminal inputOutputSectionOpt, inputOutputSection;
non terminal configurationParagraphs;
non terminal configurationParagraph;
non terminal fileControlParagraphOpt, fileControlParagraph;
non terminal fileControlEntriesOpt, fileControlEntries;
non terminal ioControlParagraphOpt, ioControlParagraph, ioControlSentencesOpt;
non terminal ioControlEntries;

non terminal dataDefinitionEntry;
non terminal dataDefinitionEntries, dataDefinitionEntriesOpt;
non terminal execSqlStatement;
non terminal storageEntry;
non terminal storageEntries;
non terminal fileDescriptionEntry;
non terminal fileDescriptionEntriesOpt;
non terminal fileDescriptionEntries;
non terminal fileSection;
non terminal workingStorageSection;
non terminal localStorageSection;
non terminal linkageSection;
non terminal dataDivisionOpt, dataDivision;

non terminal procedureDivision, procedureDivisionOpt;
non terminal statement, singleStatement, compoundStatement;
non terminal statements;
non terminal sentence;
non terminal sentences, sentencesOpt;
non terminal paragraph;
non terminal paragraphs;
non terminal section;
non terminal sections, declarativesSections;
non terminal declarativesSection;
non terminal declaratives, declarativesOpt;
non terminal functionDeclaration;
non terminal functionProcedureDivision, functionProcedureDivisionOpt;
non terminal functionOrSectionDeclaration;
non terminal functionOrSectionDeclarations;

non terminal onAtEnd, noAtEnd;
non terminal endConditions;
non terminal onException, noException;
non terminal exceptionConditions;
non terminal onInvalidKey, noInvalidKey;
non terminal keyConditions;
non terminal onOverflow, noOverflow;
non terminal overflowConditions;
non terminal onSizeError, noSizeError;
non terminal sizeErrorConditions;

non terminal addStatementConditional;
non terminal callStatementConditions;
non terminal callStatementConditional;
non terminal computeStatementConditional;
non terminal deleteStatementConditional;
non terminal divideStatementConditional;
non terminal whenConditionClause;
non terminal whenConditionClauses;
non terminal whenSearchConditionClauses;
non terminal whenOtherClause;
non terminal whenSearchConditionClause;
non terminal TypeCobol.Compiler.CodeElements.CodeElement whenEvaluateCondition;
non terminal TypeCobol.Compiler.CupParser.NodeBuilder.CodeElementList whenEvaluateConditions;
non terminal evaluateStatementWithBody;
non terminal ifStatementWithBody;
non terminal invokeStatementConditional;
non terminal multiplyStatementConditional;
non terminal performStatementWithBody;
non terminal readStatementConditional;
non terminal rwStatementCondition;
non terminal rwStatementConditions;
non terminal returnStatementConditional;
non terminal rewriteStatementConditional;
non terminal startStatementConditional;
non terminal stringStatementConditional;
non terminal subtractStatementConditional;
non terminal unstringStatementConditional;
non terminal searchStatementWithBody;
non terminal writeStatementConditional;
non terminal xmlGenerateStatementConditional;
non terminal xmlParseStatementConditional;

/* The grammar */
cobolCompilationUnit ::= cobolProgram:cp
	| cobolClass:cc
	{:  :}
	;

/*
// --- TypeCobol PROGRAM ---
*/

cobolProgram ::=
	cobolProgramBase:cpb
    nestedProgramOpt:nsp
	programEndOpt:pe
	{: Builder.EndCobolProgram(pe); :}
	;

cobolProgramBase ::=
	programAttributes:pas
	{: Builder.StartCobolProgram(programIdentification, libraryCopy); :}
	environmentDivisionOpt:ed
	dataDivisionOpt:dv
	procedureDivisionOpt:pdiv
	{: :}
	;

cobolClass ::= 
	ClassIdentification:ci
	EnvironmentDivisionHeader:edh
	factoryIdentificationOpt:fi
	objectIdentificationOpt:oi
	classEndOpt:ce
	{: :}
	;

classEndOpt ::= /*Empty*/
		{: :}
	|	ClassEnd:ce
		{: :}
		;

factoryIdentificationOpt ::= /*empty*/
		{: :}
	| factoryIdentification:fi
		{: :}
	;

factoryIdentification ::= FactoryIdentification:fi factoryDataDivisionOpt:fdd factoryObjectprocedureDivisionOpt:pdd factoryEndOpt:fe
		{: :}
	;

factoryEndOpt ::= /*empty*/
	{: :}
	| FactoryEnd:fe
	{: :}
	;
		
factoryDataDivisionOpt ::= /*empty*/
		{: :}
	|	factoryDataDivision:fdd
		{: :}
	;	

factoryDataDivision ::= DataDivisionHeader:ddh workingStorageSection:ws factoryObjectprocedureDivisionOpt:pdd
		{: :}
	;	

factoryObjectprocedureDivisionOpt ::= /*empty*/
		{: :}
	|	factoryObjectprocedureDivision:pdd
		{: :}
	;	

factoryObjectprocedureDivision ::= ProcedureDivisionHeader:pdh methodDefitionsOpt:mdefs
		{: :}
	;	

objectIdentificationOpt ::= /*empty*/
		{: :}
	|	objectIdentification:oi
		{: :}
	;	

objectIdentification ::= ObjectIdentification:oi workingStorageSection:ws factoryObjectprocedureDivisionOpt:pdd objectEndOpt:oe
		{: :}
	;	

objectEndOpt ::= /* empty */
		{: :}
	| ObjectEnd:oe
		{: :}
	;

methodDefitionsOpt ::= /* empty */
		{: :}
	|	methodDefitions:mdefs
		{: :}
	;	

methodDefitions ::= methodDefition:md
		{: :}
	| methodDefitions:mdefs methodDefition:md
		{: :}
	;

methodDefition ::= MethodIdentification:mi methodEnvironmentDivisionOpt:med dataDivisionOpt:dv procedureDivisionOpt:pdiv MethodEnd:me
	{: :}
	;

methodEnvironmentDivisionOpt ::= /*empty*/
	{:  :}
	| methodEnvironmentDivision:ed
	{:  :}
	;

methodEnvironmentDivision ::=
	EnvironmentDivisionHeader:edh  
	inputOutputSectionOpt:ioc
	{:  :}
	;

// TCRFUN_LIBRARY_COPY
programAttributes ::= ProgramIdentification:pid libraryCopyOpt:lc
	{:  programIdentification = pid; libraryCopy = lc; :}
	;

libraryCopyOpt ::= /*empty */
	{:  RESULT = null; :}
	| LibraryCopy:lc
	{:  RESULT = lc; :}
	;

programEndOpt ::= /* empty */
	| ProgramEnd:pe
	{:  RESULT = pe; :}
	;

nestedProgram ::= 	
	cobolProgramBase:cpb
    nestedProgramOpt:nsp
	ProgramEnd:pe
	{: :}
	;

nestedProgramOpt ::= /* Empty */
	{:  :}
	| nestedProgramOpt:nsp nestedProgram:np
	{:  :}
	;

/*
// --- ENVIRONMENT DIVISION ---
*/

environmentDivisionOpt ::= /*empty*/
	{:  :}
	| environmentDivision:ed
	{:  :}
	;

environmentDivision ::=
	EnvironmentDivisionHeader:edh  
	{: Builder.StartEnvironmentDivision(edh); :}
	configurationSectionOpt:cs
	inputOutputSectionOpt:ioc
	{: Builder.EndEnvironmentDivision(); :}
	;

configurationSectionOpt ::= /*empty*/
	{:  :}
	| configurationSection:cs
	{:  :}
	;

configurationSection ::= ConfigurationSectionHeader:csh
	{:  :}
	| ConfigurationSectionHeader:csh 
		{: Builder.StartConfigurationSection(csh); :}
	  configurationParagraphs:cps
		{: Builder.EndConfigurationSection(); :}
	;

configurationParagraphs ::= configurationParagraph:cp
		{:  :}
	| configurationParagraphs:cps configurationParagraph:cp
		{:  :}
	;

configurationParagraph ::= 
      SourceComputerParagraph:scp
	{: Builder.StartSourceComputerParagraph(scp); Builder.EndSourceComputerParagraph(); :}
	| ObjectComputerParagraph:ocp
	{: Builder.StartObjectComputerParagraph(ocp); Builder.EndObjectComputerParagraph(); :}
	| SpecialNamesParagraph:snp
	{: Builder.StartSpecialNamesParagraph(snp); Builder.EndSpecialNamesParagraph(); :}
	| RepositoryParagraph:rp
	{: Builder.StartRepositoryParagraph(rp); Builder.EndRepositoryParagraph(); :}
	;

inputOutputSectionOpt ::= /*empty*/
	{:  :}
	| inputOutputSection:ios
	{:  :}
	;

inputOutputSection ::= 
	InputOutputSectionHeader:iosh
	{: Builder.StartInputOutputSection(iosh); :}
	fileControlParagraphOpt:fcp
	ioControlParagraphOpt:iocp
	{: Builder.EndInputOutputSection(); :}
	;

fileControlParagraphOpt ::= /*empty*/
	{:  :}
	| fileControlParagraph:fcp
	{:  :}
	;

fileControlParagraph ::=
	FileControlParagraphHeader:fcph
	{: Builder.StartFileControlParagraph(fcph); :}
	fileControlEntriesOpt:fces
	{: Builder.EndFileControlParagraph(); :}
	;

fileControlEntriesOpt ::= /*empty*/
		{:  :}
	| fileControlEntries:fces
		{:  :}
	;

fileControlEntries ::= FileControlEntry:fce
		{: Builder.StartFileControlEntry(fce); Builder.EndFileControlEntry(); :}
	| fileControlEntries:fces FileControlEntry:fce
		{: Builder.StartFileControlEntry(fce); Builder.EndFileControlEntry(); :}
	;

ioControlParagraphOpt ::= /*empty*/
		{:  :}
	| ioControlParagraph:iocp
		{:  :}
	;

ioControlParagraph ::= 
	IOControlParagraphHeader:iocph
	ioControlSentencesOpt:iocs
	{:  :}
	;

ioControlSentencesOpt ::= /* empty */	
		{:  :}
	| ioControlEntries:ioces SentenceEnd:se
		{:	:}
	;

ioControlEntries ::= IOControlEntry:ioce
		{:  :}
	| ioControlEntries:ioces IOControlEntry:ioce
		{:  :}
	;


/*
// --- DATA DIVISION ---
*/
dataDivisionOpt ::= /*empty*/
	{:  :}
	| dataDivision:dv
	{:  :}
	;

dataDivision ::=
	DataDivisionHeader:ddh
	{: Builder.StartDataDivision(ddh); :}
	fileSection:fs
	workingStorageSection :wss
	localStorageSection:lss
	linkageSection:ls
	{: Builder.EndDataDivision(); :}
	;

fileSection ::= /*empty*/
	{:  :}
	| FileSectionHeader:feh 
	{: Builder.StartFileSection(feh); :}
	fileDescriptionEntriesOpt:des
	{: Builder.EndFileSection(); :}
	;

fileDescriptionEntriesOpt ::= /*empty*/
	{:  :}
	| fileDescriptionEntries:fdes
	{:  :}
	;

fileDescriptionEntries ::=
	fileDescriptionEntry:fde
	{:  :}
	| fileDescriptionEntries:fdes fileDescriptionEntry:fde
	{:  :}
	;

fileDescriptionEntry ::= 
	FileDescriptionEntry:fde 
	{: Builder.StartFileDescriptionEntry(fde); :}
	dataDefinitionEntries:dfes
	{: Builder.EndFileDescriptionEntry(); :}
	;

workingStorageSection ::= /*empty*/
	{:  :}
	| WorkingStorageSectionHeader:wssh 
	{: Builder.StartWorkingStorageSection(wssh); :}
	  storageEntries:ses
	{: Builder.EndWorkingStorageSection(); :}
	;

storageEntries ::= /*empty*/
	{:  :}
	| storageEntries:ses storageEntry:se
	{:  :}
	;

storageEntry ::= dataDefinitionEntry:dde
	{:  :}
	| execSqlStatement:ess
	{:  :}
	;

execSqlStatement ::= ExecStatement:es
	{:  :}
	| ExecStatement:es SentenceEnd:se
	{:  :}
	;

localStorageSection ::= /*empty*/
	{:  :}
	| LocalStorageSectionHeader:lsh 
	{: Builder.StartLocalStorageSection(lsh); :}
	storageEntries:ses	
	{: Builder.EndLocalStorageSection(); :}
	;

dataDefinitionEntriesOpt ::= /*empty*/
	{:  :}
	| dataDefinitionEntries:ddes
	{:  :}
	;

dataDefinitionEntries ::= dataDefinitionEntry:dde
	{:  :}
	| dataDefinitionEntries:ddes dataDefinitionEntry:dde
	{:  :}
	;

dataDefinitionEntry ::=
	  DataDescriptionEntry:dde
	{: Builder.StartDataDescriptionEntry(dde); :}
	| DataRedefinesEntry:dre
	{: Builder.StartDataRedefinesEntry(dre); :}
	| DataRenamesEntry:dre
	{: Builder.StartDataRenamesEntry(dre); :}
	| DataConditionEntry:dce
	{: Builder.StarDataConditionEntry(dce); :}
	;

linkageSection ::= /*empty*/
	{:  :}
	| LinkageSectionHeader:lsh 
	{: Builder.StartLinkageSection(lsh); :}
	dataDefinitionEntriesOpt:ddes
	{: Builder.EndLinkageSection(); :}
	;

procedureDivisionOpt ::= /*empty*/
	{:  :}
	| procedureDivision:pdiv
	{:  :}
	;

// TCRFUN_DECLARATION_AS_NESTED_PROGRAM
procedureDivision ::=
	ProcedureDivisionHeader:pdh 
	{: Builder.StartProcedureDivision(pdh); :}
	declarativesOpt:decls
	functionOrSectionDeclarations:elems
	{: Builder.EndProcedureDivision(); :}
	;

functionOrSectionDeclarations ::= /*empty*/
	{:  :}
	| functionOrSectionDeclarations:elems functionOrSectionDeclaration:elem
	{:  :}
	;

functionOrSectionDeclaration ::= functionDeclaration:fd
	{:  :}
	| section:s
	{:  :}
	;

// - custom header
// TCRFUN_DECLARATION_NO_IDENTIFICATION_DIVISION
// TCRFUN_DECLARATION_NO_ENVIRONMENT_DIVISION
// TCRFUN_MANDATORY_END_DECLARE
functionDeclaration ::=
	FunctionDeclarationHeader:fdh
	{: Builder.StartFunctionDeclaration(fdh); :}
	dataDivisionOpt:dv
	functionProcedureDivisionOpt:fpd
	FunctionDeclarationEnd:fe
	{: Builder.EndFunctionDeclaration(fe); :}
	;

functionProcedureDivisionOpt ::= /*empty*/
	{:  :}
	| functionProcedureDivision:fpd
	{:  :}
	;

// TCRFUN_DECLARATION_NO_DECLARATIVES
functionProcedureDivision ::=
	ProcedureDivisionHeader:pdh 
	{: Builder.StartFunctionProcedureDivision(pdh); Builder.EndFunctionProcedureDivision(); :}
| 	ProcedureDivisionHeader:pdh 
	{: Builder.StartFunctionProcedureDivision(pdh); :}
	sections:alls
	{: Builder.EndFunctionProcedureDivision(); :}
	;


declarativesOpt ::= /*empty*/
	{:  :}
	| declaratives:decls
	{:  :}
	;

declaratives ::=
	DeclarativesHeader:dh
	{: Builder.StartDeclaratives(dh); :}
	declarativesSections:decls
	DeclarativesEnd:de
	{: Builder.EndDeclaratives(de); :}
	;


declarativesSections ::= declarativesSection:ds
	{:  :}
	| declarativesSections:decls declarativesSection:ds
	{:  :}
	;

declarativesSection ::= 
	SectionHeader:sh 
	{:  :}
	UseStatement:us
	{:  :}
	| SectionHeader:sh 
	{:  :}
	UseStatement:us paragraphs:p
	{:  :}	
	;

sections ::= section:s
	{:  :}
	| sections:alls section:s
	{:  :}
	;

section ::= SectionHeader:sh 
	{: Builder.StartSection(sh); Builder.EndSection(); :}
	| SectionHeader:sh 
	{: Builder.StartSection(sh); :}
	paragraphs:ps
	{: Builder.EndSection(); :}
	| ParagraphHeader:ph 
	{: Builder.StartParagraph(ph); Builder.EndParagraph(); :}
	| ParagraphHeader:ph 
	{: Builder.StartParagraph(ph); :}
	paragraphs:ps
	{: Builder.EndParagraph(); :}
	| sentences:alls
	{:  :}
	;

paragraphs ::= paragraph:p
	{:  :}
	| paragraphs:ps paragraph:p
	{:  :}
	;

paragraph ::= 
	ParagraphHeader:ph 
	{: Builder.StartParagraph(ph); :}
	sentencesOpt:alls
	{: Builder.EndParagraph(); :}
	| sentences:alls
	{:  :}
	;

sentencesOpt ::= /*empty*/
	{:  :}
	| sentences:alls
	{:  :}
	;

sentences ::= sentence:s
	{:  :}
	| sentences:alls sentence:s
	{:  :}
	;

sentence ::= SentenceEnd:send
	  {: Builder.StartSentence(); Builder.EndSentence(send); :}
    | {: Builder.StartSentence(); :} statements:stmts SentenceEnd:send
	  {: Builder.EndSentence(send); :}
	//JCM RESOLVE THIS TODO
	| ExecStatement:stmt
	{: Builder.StartExecStatement(stmt); Builder.EndExecStatement(); :}
	;

statements ::= statement:stmt
	{:  :}
	| statements:stmts statement:stmt
	{:  :}
	;

statement ::= singleStatement:stmt
	{:  :}
	| compoundStatement:stmt
	{:  :}
	| error statement /* ERROR Recovery on Statement ==> go to the next statement */
	{: :}
	;

singleStatement ::=
	ContinueStatement:stmt
	{: Builder.OnContinueStatement(stmt); :}
	| EntryStatement:stmt
	{: Builder.OnEntryStatement(stmt); :}
// -- arithmetic --
// -- see computeStatementConditional --
// -- data movement --
	| AcceptStatement:stmt // (DATE, DAY, DAY-OF-WEEK, TIME)
	{: Builder.OnAcceptStatement(stmt); :}
	| InitializeStatement:stmt
	{: Builder.OnInitializeStatement(stmt); :}
	| InspectStatement:stmt
	{: Builder.OnInspectStatement(stmt); :}
	| MoveStatement:stmt
	{: Builder.OnMoveStatement(stmt); :}
	| SetStatement:stmt
	{: Builder.OnSetStatement(stmt); :}
// -- ending --
	| StopStatement:stmt
	{: Builder.OnStopStatement(stmt); :}
	| ExitMethodStatement:stmt
	{: Builder.OnExitMethodStatement(stmt); :}
	| ExitProgramStatement:stmt
	{: Builder.OnExitProgramStatement(stmt); :}
	| GobackStatement:stmt
	{: Builder.OnGobackStatement(stmt); :}
// -- input-output --
	| CloseStatement:stmt
	{: Builder.OnCloseStatement(stmt); :}
	| DisplayStatement:stmt
	{: Builder.OnDisplayStatement(stmt); :}
	| OpenStatement:stmt
	{: Builder.OnOpenStatement(stmt); :}
// -- ordering --
	| MergeStatement:stmt
	{: Builder.OnMergeStatement(stmt); :}
	| ReleaseStatement:stmt
	{: Builder.OnReleaseStatement(stmt); :}
	| SortStatement:stmt
	{: Builder.OnSortStatement(stmt); :}
// -- procedure-branching --
	| AlterStatement:stmt
	{: Builder.OnAlterStatement(stmt); :}
	| ExitStatement:stmt
	{: Builder.OnExitStatement(stmt); :}
	| GotoStatement:stmt
	{: Builder.OnGotoStatement(stmt); :}
	| PerformProcedureStatement:stmt
	{: Builder.OnPerformProcedureStatement(stmt); :}
// -- program or method linkage --// TYPECOBOL
	| ProcedureStyleCall:stmt
	{: Builder.OnProcedureStyleCall(stmt, null); :}
	| ProcedureStyleCall:stmt CallStatementEnd:end
	{: Builder.OnProcedureStyleCall(stmt, end); :}
	| CancelStatement:stmt
	{: Builder.OnCancelStatement(stmt); :}
// -- DB2 & CICS integration --
	| ExecStatement:stmt
	{: Builder.OnExecStatement(stmt); :}
	;
	
// Statements with optional body  
compoundStatement ::= addStatementConditional:stmt
		{:  :}
	|	callStatementConditional:stmt
		{:  :}
	|	computeStatementConditional:stmt
		{:  :}
	|	deleteStatementConditional:stmt
		{:  :}
	|	evaluateStatementWithBody:stmt
		{:  :}
	|	ifStatementWithBody:stmt
		{:  :}
	|	invokeStatementConditional:stmt
		{:  :}
	|	divideStatementConditional:stmt
		{:  :}
	|	multiplyStatementConditional:stmt
		{:  :}
	|	performStatementWithBody:stmt
		{:  :}
	|	readStatementConditional:stmt
		{:  :}
	|	returnStatementConditional:stmt
		{:  :}
	|	rewriteStatementConditional:stmt
		{:  :}
	|	searchStatementWithBody:stmt
		{:  :}
	|	startStatementConditional:stmt
		{:  :}
	|	stringStatementConditional:stmt
		{:  :}
	|	subtractStatementConditional:stmt
		{:  :}
	|	unstringStatementConditional:stmt
		{:  :}
	|	writeStatementConditional:stmt
		{:  :}
	|	xmlGenerateStatementConditional:stmt
		{:  :}
	|	xmlParseStatementConditional:stmt
		{:  :}
	;

addStatementConditional ::=
		AddStatement:stmt
		{: Builder.StartAddStatementConditional(stmt); Builder.EndAddStatementConditional(); :}
	|	AddStatement:stmt AddStatementEnd:end
		{: Builder.StartAddStatementConditional(stmt); Builder.EndAddStatementConditional(end); :}
	|	AddStatement:stmt {: Builder.StartAddStatementConditional(stmt); :} sizeErrorConditions:conds
		{:  Builder.EndAddStatementConditional(); :}
	|	AddStatement:stmt {: Builder.StartAddStatementConditional(stmt); :} sizeErrorConditions:conds AddStatementEnd:end
		{:  Builder.EndAddStatementConditional(end); :}
	;

callStatementConditional ::=
		CallStatement:stmt
		{: Builder.StartCallStatementConditional(stmt); Builder.EndCallStatementConditional(); :}
	|	CallStatement:stmt {: Builder.StartCallStatementConditional(stmt); :} CallStatementEnd:end
		{: Builder.EndCallStatementConditional(end); :}
	|	CallStatement:stmt {: Builder.StartCallStatementConditional(stmt); :} callStatementConditions:conds
		{: Builder.EndCallStatementConditional(); :}
	|	CallStatement:stmt {: Builder.StartCallStatementConditional(stmt); :} callStatementConditions:conds CallStatementEnd:end
		{:  Builder.EndCallStatementConditional(end); :}
	;

callStatementConditions ::=
	  onException:on
	{:  :}
	| noException:not_on
	{:  :}
	| onOverflow:on
	{:  :}
	;

computeStatementConditional ::=
		ComputeStatement:stmt
		{: Builder.StartComputeStatementConditional(stmt); Builder.EndComputeStatementConditional(); :}
	|	ComputeStatement:stmt {: Builder.StartComputeStatementConditional(stmt); :} ComputeStatementEnd:end
		{: Builder.EndComputeStatementConditional(end); :}
	|	ComputeStatement:stmt {: Builder.StartComputeStatementConditional(stmt); :} sizeErrorConditions:conds
		{: Builder.EndComputeStatementConditional(); :}
	|	ComputeStatement:stmt {: Builder.StartComputeStatementConditional(stmt); :} sizeErrorConditions:conds ComputeStatementEnd:end
		{: Builder.EndComputeStatementConditional(end); :}
	;

deleteStatementConditional ::=
		DeleteStatement:stmt
		{: Builder.StartDeleteStatementConditional(stmt); Builder.EndDeleteStatementConditional(); :}
	|	DeleteStatement:stmt {: Builder.StartDeleteStatementConditional(stmt); :} DeleteStatementEnd:end
		{: Builder.EndDeleteStatementConditional(end); :}
	|	DeleteStatement:stmt {: Builder.StartDeleteStatementConditional(stmt); :} keyConditions:conds
		{: Builder.EndDeleteStatementConditional(); :}
	|	DeleteStatement:stmt {: Builder.StartDeleteStatementConditional(stmt); :} keyConditions:conds DeleteStatementEnd:end
		{: Builder.EndDeleteStatementConditional(end); :}
	;

divideStatementConditional ::=
		DivideStatement:stmt
		{: Builder.StartDivideStatementConditional(stmt); Builder.EndDivideStatementConditional(); :}
	|	DivideStatement:stmt {: Builder.StartDivideStatementConditional(stmt); :} DivideStatementEnd:end
		{: Builder.EndDivideStatementConditional(end); :}
	|	DivideStatement:stmt {: Builder.StartDivideStatementConditional(stmt); :} sizeErrorConditions:conds
		{: Builder.EndDivideStatementConditional(); :}
	|	DivideStatement:stmt sizeErrorConditions:conds DivideStatementEnd:end
		{: Builder.EndDivideStatementConditional(end); :}
	;

evaluateStatementWithBody ::=
		EvaluateStatement:est
		{: Builder.StartEvaluateStatementWithBody(est); Builder.EndEvaluateStatementWithBody(); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} EvaluateStatementEnd:ese
		{: Builder.EndEvaluateStatementWithBody(ese); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenConditionClauses:wccs
		{: Builder.EndEvaluateStatementWithBody(); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenConditionClauses:wccs  EvaluateStatementEnd:ese
		{: Builder.EndEvaluateStatementWithBody(ese); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenOtherClause:woc
		{: Builder.EndEvaluateStatementWithBody(); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenOtherClause:woc EvaluateStatementEnd:ese
		{: Builder.EndEvaluateStatementWithBody(ese); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenConditionClauses:wccs whenOtherClause:woc
		{: Builder.EndEvaluateStatementWithBody(); :}
	|	EvaluateStatement:est {: Builder.StartEvaluateStatementWithBody(est); :} whenConditionClauses:wccs whenOtherClause:woc EvaluateStatementEnd:ese
		{: Builder.EndEvaluateStatementWithBody(ese); :}
	;

whenConditionClauses ::= 
		whenConditionClause:wcc
		{:  :}
	|	whenConditionClauses:wccs whenConditionClause:wcc
		{:  :}
	;

whenConditionClause ::= whenEvaluateConditions:wecs {: Builder.StartWhenConditionClause(wecs); :} statements:stmts
	{: Builder.EndWhenConditionClause(); :}
	;

whenEvaluateCondition ::= WhenSearchCondition:wec
	{: RESULT = wec; :}
	| WhenCondition:wec
	{: RESULT = wec; :}
	;

whenEvaluateConditions ::= whenEvaluateCondition:wec
	{: RESULT = new CodeElementList(){wec}; :}
	| whenEvaluateConditions:wecs whenEvaluateCondition:wec
	{: wecs.Add(wec); RESULT = wecs; :}
	;

whenOtherClause ::= WhenOtherCondition:woc {: Builder.StartWhenOtherClause(woc); :} statements:stmts
	{: Builder.EndWhenOtherClause(); :}
	;

ifStatementWithBody ::=
	IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts
	{: Builder.EndIfStatementWithBody(); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts IfStatementEnd:end
	{: Builder.EndIfStatementWithBody(end); :}

	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext
	{:  Builder.AddNextSentenceStatement(thenNext); Builder.EndIfStatementWithBody(); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext IfStatementEnd:end
	{:  Builder.AddNextSentenceStatement(thenNext); Builder.EndIfStatementWithBody(end); :}

	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts ElseCondition:ec {: Builder.EnterElseClause(ifs); :} statements:elseStmts
	{: Builder.EndIfStatementWithBody(); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts ElseCondition:ec {: Builder.EnterElseClause(ifs); :} NextSentenceStatement:elseNext
	{:  Builder.AddNextSentenceStatement(elseNext); Builder.EndIfStatementWithBody(); :}

	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts ElseCondition:ec {: Builder.EnterElseClause(ifs); :} statements:elseStmts IfStatementEnd:end
	{: Builder.EndIfStatementWithBody(end); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} statements:thenStmts ElseCondition:ec {: Builder.EnterElseClause(ifs); :} NextSentenceStatement:elseNext IfStatementEnd:end
	{:  Builder.AddNextSentenceStatement(elseNext); Builder.EndIfStatementWithBody(end); :}

	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext {: Builder.AddNextSentenceStatement(thenNext); :} ElseCondition:ec {: Builder.EnterElseClause(ifs); :} statements:elseStmts
	{: Builder.EndIfStatementWithBody(); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext {: Builder.AddNextSentenceStatement(thenNext); :} ElseCondition:ec {: Builder.EnterElseClause(ifs); :} NextSentenceStatement:elseNext
	{:  Builder.AddNextSentenceStatement(elseNext); Builder.EndIfStatementWithBody(); :}

	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext {: Builder.AddNextSentenceStatement(thenNext); :} ElseCondition:ec {: Builder.EnterElseClause(ifs); :} statements:elseStmts IfStatementEnd:end
	{: Builder.EndIfStatementWithBody(end); :}
	| IfStatement:ifs {: Builder.StartIfStatementWithBody(ifs); :} NextSentenceStatement:thenNext {: Builder.AddNextSentenceStatement(thenNext); :} ElseCondition:ec {: Builder.EnterElseClause(ifs); :} NextSentenceStatement:elseNext IfStatementEnd:end
	{:  Builder.AddNextSentenceStatement(elseNext); Builder.EndIfStatementWithBody(end); :}
	;

invokeStatementConditional ::=
		InvokeStatement:stmt
		{: Builder.StartInvokeStatementConditional(stmt); Builder.EndInvokeStatementConditional(); :}
	|	InvokeStatement:stmt {: Builder.StartInvokeStatementConditional(stmt); :} InvokeStatementEnd:end
		{: Builder.EndInvokeStatementConditional(end); :}
	|	InvokeStatement:stmt {: Builder.StartInvokeStatementConditional(stmt); :} exceptionConditions:conds
		{: Builder.EndInvokeStatementConditional(); :}
	|	InvokeStatement:stmt {: Builder.StartInvokeStatementConditional(stmt); :} exceptionConditions:conds InvokeStatementEnd:end
		{: Builder.EndInvokeStatementConditional(end); :}
	;

multiplyStatementConditional ::=
		MultiplyStatement:stmt
		{: Builder.StartMultiplyStatementConditional(stmt); Builder.EndMultiplyStatementConditional(); :}
	|	MultiplyStatement:stmt {: Builder.StartMultiplyStatementConditional(stmt); :} MultiplyStatementEnd:end
		{: Builder.EndMultiplyStatementConditional(end); :}
	|	MultiplyStatement:stmt {: Builder.StartMultiplyStatementConditional(stmt); :} sizeErrorConditions:conds
		{: Builder.EndMultiplyStatementConditional(); :}
	|	MultiplyStatement:stmt sizeErrorConditions:conds {: Builder.StartMultiplyStatementConditional(stmt); :} MultiplyStatementEnd:end
		{: Builder.EndMultiplyStatementConditional(end); :}
	;

performStatementWithBody ::=			
		PerformStatement:stmt
		{: Builder.StartPerformStatementWithBody(stmt); Builder.EndPerformStatementWithBody(); :}
	|	PerformStatement:stmt {: Builder.StartPerformStatementWithBody(stmt); :} PerformStatementEnd:end
		{: Builder.EndPerformStatementWithBody(end); :}
	|	PerformStatement:stmt {: Builder.StartPerformStatementWithBody(stmt); :} statements:stmts
		{: Builder.EndPerformStatementWithBody(); :}
	|	PerformStatement:stmt {: Builder.StartPerformStatementWithBody(stmt); :} statements:stmts PerformStatementEnd:end
		{: Builder.EndPerformStatementWithBody(end); :}
	;

readStatementConditional ::=
		ReadStatement:stmt
		{: Builder.EnterReadStatementConditional(stmt); Builder.EndReadStatementConditional(); :}
	|	ReadStatement:stmt {: Builder.EnterReadStatementConditional(stmt); :} ReadStatementEnd:end
		{: Builder.EndReadStatementConditional(end); :}
	|	ReadStatement:stmt {: Builder.EnterReadStatementConditional(stmt); :} rwStatementConditions:conds
		{: Builder.EndReadStatementConditional(); :}
	|	ReadStatement:stmt {: Builder.EnterReadStatementConditional(stmt); :} rwStatementConditions:conds ReadStatementEnd:end
		{: Builder.EndReadStatementConditional(end); :}
	;

rwStatementCondition ::=
	  onAtEnd:at
	{:  :}
	| noAtEnd:not_at
	{:  :}
	| onInvalidKey:on
	{:  :}
	| noInvalidKey:not_on
	{:  :}
	;

rwStatementConditions ::=
		rwStatementCondition:rwsc
		{:  :}
	|	rwStatementConditions:rwscs rwStatementCondition:rwsc
		{:  :}
	;

returnStatementConditional ::=
		ReturnStatement:stmt
		{: Builder.EnterReturnStatementConditional(stmt); Builder.EndReturnStatementConditional(); :}
	|	ReturnStatement:stmt {: Builder.EnterReturnStatementConditional(stmt); :} ReturnStatementEnd:end
		{: Builder.EndReturnStatementConditional(end); :}
	|	ReturnStatement:stmt {: Builder.EnterReturnStatementConditional(stmt); :} endConditions:conds
		{: Builder.EndReturnStatementConditional(); :}
	|	ReturnStatement:stmt {: Builder.EnterReturnStatementConditional(stmt); :} endConditions:conds ReturnStatementEnd:end
		{: Builder.EndReturnStatementConditional(end); :}
	;

rewriteStatementConditional ::=
		RewriteStatement:stmt
		{: Builder.StartRewriteStatementConditional(stmt); Builder.EndRewriteStatementConditional(); :}
	|	RewriteStatement:stmt {: Builder.StartRewriteStatementConditional(stmt); :} RewriteStatementEnd:end
		{: Builder.EndRewriteStatementConditional(end); :}
	|	RewriteStatement:stmt {: Builder.StartRewriteStatementConditional(stmt); :} keyConditions:conds
		{: Builder.EndRewriteStatementConditional(); :}
	|	RewriteStatement:stmt {: Builder.StartRewriteStatementConditional(stmt); :} keyConditions:conds RewriteStatementEnd:end
		{: Builder.EndRewriteStatementConditional(end); :}
	;

searchStatementWithBody ::=
		SearchStatement:stmt {: Builder.StartSearchStatementWithBody(stmt); :} whenSearchConditionClauses:wsccs
		{: Builder.EndSearchStatementWithBody(); :}
	|	SearchStatement:stmt {: Builder.StartSearchStatementWithBody(stmt); :} whenSearchConditionClauses:wsccs SearchStatementEnd:send
		{: Builder.EndSearchStatementWithBody(end); :}
	|	SearchStatement:stmt {: Builder.StartSearchStatementWithBody(stmt); :} onAtEnd:cend whenSearchConditionClauses:wsccs
		{: Builder.EndSearchStatementWithBody(); :}
	|	SearchStatement:stmt {: Builder.StartSearchStatementWithBody(stmt); :} onAtEnd:cend whenSearchConditionClauses:wsccs SearchStatementEnd:send
		{: Builder.EndSearchStatementWithBody(end); :}
	;

whenSearchConditionClause ::= 
		WhenSearchCondition:wsc {: Builder.StartWhenSearchConditionClause(wsc); :} statements:stmts
		{: Builder.EndWhenSearchConditionClause(); :}
	|	WhenSearchCondition:wsc {: Builder.StartWhenSearchConditionClause(wsc); :} NextSentenceStatement:next
		{: Builder.AddNextSentenceStatement(); Builder.EndWhenSearchConditionClause(); :}
	;

whenSearchConditionClauses ::= whenSearchConditionClause:wscc
		{:  :}
	|	whenSearchConditionClauses:wsccs whenSearchConditionClause:wscc
		{:  :}
	;

startStatementConditional ::=
		StartStatement:stmt
		{: Builder.StartStartStatementConditional(stmt); Builder.EndStartStatementConditional(); :}
	|	StartStatement:stmt {: Builder.StartStartStatementConditional(stmt); :} StartStatementEnd:end
		{: Builder.EndStartStatementConditional(end); :}
	|	StartStatement:stmt {: Builder.StartStartStatementConditional(stmt); :} keyConditions:conds
		{: Builder.EndStartStatementConditional(); :}
	|	StartStatement:stmt {: Builder.StartStartStatementConditional(stmt); :} keyConditions:conds StartStatementEnd:end
		{: Builder.EndStartStatementConditional(end); :}
	;

stringStatementConditional ::=
		StringStatement:stmt
		{: Builder.StartStringStatementConditional(stmt); Builder.EndStringStatementConditional(); :}
	|	StringStatement:stmt {: Builder.StartStringStatementConditional(stmt); :} StringStatementEnd:end
		{: Builder.EndStringStatementConditional(end); :}
	|	StringStatement:stmt {: Builder.StartStringStatementConditional(stmt); :} overflowConditions:conds
		{: Builder.EndStringStatementConditional(); :}
	|	StringStatement:stmt {: Builder.StartStringStatementConditional(stmt); :} overflowConditions:conds StringStatementEnd:end
		{: Builder.EndStringStatementConditional(end); :}
	;

subtractStatementConditional ::=
		SubtractStatement:stmt
		{: Builder.StartSubtractStatementConditional(stmt); Builder.EndSubtractStatementConditional(); :}
	|	SubtractStatement:stmt {: Builder.StartSubtractStatementConditional(stmt); :} SubtractStatementEnd:end
		{: Builder.EndSubtractStatementConditional(end); :}
	|	SubtractStatement:stmt {: Builder.StartSubtractStatementConditional(stmt); :} sizeErrorConditions:conds
		{: Builder.EndSubtractStatementConditional(); :}
	|	SubtractStatement:stmt {: Builder.StartSubtractStatementConditional(stmt); :} sizeErrorConditions:conds SubtractStatementEnd:end
		{: Builder.EndSubtractStatementConditional(end); :}
	;

unstringStatementConditional ::=
		UnstringStatement:stmt
		{: Builder.StartUnstringStatementConditional(); Builder.EndUnstringStatementConditional(); :}
	|	UnstringStatement:stmt {: Builder.StartUnstringStatementConditional(); :} UnstringStatementEnd:end
		{: Builder.EndUnstringStatementConditional(end); :}
	|	UnstringStatement:stmt {: Builder.StartUnstringStatementConditional(); :} overflowConditions:conds
		{: Builder.EndUnstringStatementConditional(); :}
	|	UnstringStatement:stmt {: Builder.StartUnstringStatementConditional(); :} overflowConditions:conds UnstringStatementEnd:end
		{: Builder.EndUnstringStatementConditional(end); :}
	;

writeStatementConditional ::=
		WriteStatement:stmt
		{: Builder.StartWriteStatementConditional(stmt); Builder.EndWriteStatementConditional(); :}
	|	WriteStatement:stmt {: Builder.StartWriteStatementConditional(stmt); :} WriteStatementEnd:end
		{: Builder.EndWriteStatementConditional(end); :}
	|	WriteStatement:stmt {: Builder.StartWriteStatementConditional(stmt); :} rwStatementConditions:conds
		{: Builder.EndWriteStatementConditional(); :}
	|	WriteStatement:stmt {: Builder.StartWriteStatementConditional(stmt); :} rwStatementConditions:conds WriteStatementEnd:end
		{: Builder.EndWriteStatementConditional(end); :}
	;

xmlGenerateStatementConditional ::=
		XmlGenerateStatement:stmt
		{: Builder(StartXmlGenerateStatementConditional(stmt); Builder.EndXmlGenerateStatementConditional() :}
	|	XmlGenerateStatement:stmt {: Builder(StartXmlGenerateStatementConditional(stmt); :} XmlStatementEnd:end
		{: Builder.EndXmlGenerateStatementConditional(end) :}
	|	XmlGenerateStatement:stmt {: Builder(StartXmlGenerateStatementConditional(stmt); :} exceptionConditions:conds
		{: Builder.EndXmlGenerateStatementConditional() :}
	|	XmlGenerateStatement:stmt {: Builder(StartXmlGenerateStatementConditional(stmt); :} exceptionConditions:conds XmlStatementEnd:end
		{: Builder.EndXmlGenerateStatementConditional(end) :}
	;

xmlParseStatementConditional ::=
		XmlParseStatement:stmt
		{: Builder(StartXmlParseStatementConditional(stmt); Builder.EndXmlParseStatementConditional() :}
	|	XmlParseStatement:stmt {: Builder(StartXmlParseStatementConditional(stmt); :} XmlStatementEnd:end
		{: Builder.EndXmlParseStatementConditional(end) :}
	|	XmlParseStatement:stmt {: Builder(StartXmlParseStatementConditional(stmt); :} exceptionConditions:conds
		{: Builder.EndXmlParseStatementConditional() :}
	|	XmlParseStatement:stmt {: Builder(StartXmlParseStatementConditional(stmt); :} exceptionConditions:conds XmlStatementEnd:end
		{: Builder.EndXmlParseStatementConditional(end) :}
	;

// Conditional execution of statements

onAtEnd ::= AtEndCondition:cond 
	{: Builder.StartOnAtEnd(cond); :}
	statements:stmts
	{: Builder.EndOnAtEnd(); :}
	;
noAtEnd ::= NotAtEndCondition:cond 
	{: Builder.StartNoAtEnd(cond); :}
	statements:stmts
	{: Builder.EndNoAtEnd(); :}
	;

endConditions ::= onAtEnd:at
	{:  :}
	| noAtEnd:no_at
	{:  :}
	| endConditions:econds onAtEnd:at
	{:  :}
	| endConditions:econds noAtEnd:no_at
	{:  :}
	;

onException ::= OnExceptionCondition:cond 
	{: Builder.StartOnException(cond); :}
	statements:stmts
	{: Builder.EndOnException(); :}
	;
noException ::= NotOnExceptionCondition:cond 
	{: Builder.StartNoException(cond); :}
	statements:stmts
	{: Builder.EndNoException(); :}
	;
exceptionConditions ::= onException:on
	{:  :}
	| noException:not_on
	{:  :}
	| exceptionConditions:econds onException:on
	{:  :}
	| exceptionConditions:econds noException:not_on
	{:  :}
	;


onInvalidKey ::= InvalidKeyCondition:cond 
	{: Builder.StartOnInvalidKey(cond); :}
	statements:stmts
	{: Builder.EndOnInvalidKey(); :}
	;
noInvalidKey ::= NotInvalidKeyCondition:cond 
	{: Builder.StartNoInvalidKey(cond); :}
	statements:stmts
	{: Builder.EndNoInvalidKey(); :}
	;

keyConditions ::= onInvalidKey:invalid
	{:  :}
	| noInvalidKey:not_invalid
	{:  :}
	| keyConditions:kconds onInvalidKey:valid
	{:  :}
	| keyConditions:kconds noInvalidKey:not_invalid
	{:  :}
	;

onOverflow ::= OnOverflowCondition:cond 
	{: Builder.StartOnOverflow(cond); :}
		statements:stmts
	{: Builder.EndOnOverflow(); :}
	;
noOverflow ::= NotOnOverflowCondition:cond 
	{: Builder.StartNoOverflow(cond); :}
	statements:stmts
	{: Builder.EndNoOverflow(); :}
	;

overflowConditions ::= onOverflow:on
	{:  :}
	| noOverflow:not_on
	{:  :}
	| overflowConditions:oconds onOverflow:on
	{:  :}
	| overflowConditions:oconds noOverflow:not_on
	{:  :}
	;

onSizeError ::= OnSizeErrorCondition:cond 
	{: Builder.StartOnSizeError(cond); :}
	statements:stmts
	{:  Builder.EndOnSizeError(); :}
	;

noSizeError ::= NotOnSizeErrorCondition:cond 
	{: Builder.StartNoSizeError(cond); :}
	statements:stmts
	{:  Builder.EndNoSizeError(); :}
	;

sizeErrorConditions ::= 
	  onSizeError:on
		{: :}
	| noSizeError:not_on
		{: :}
	| sizeErrorConditions:seconds onSizeError:on
		{: :}
	| sizeErrorConditions:seconds noSizeError:not_on
		{: :}
	;
